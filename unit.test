import unittest
from unittest.mock import patch, MagicMock
import numpy as np
import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LassoCV
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score

class TestSecomPipeline(unittest.TestCase):

    def setUp(self):
        # Create small synthetic dataset for testing
        self.X = np.random.rand(100, 10)
        self.y = np.random.choice([0, 1], size=100)

    def test_imputation(self):
        X_missing = self.X.copy()
        X_missing[0, 0] = np.nan
        imputer = SimpleImputer(strategy='mean')
        X_imputed = imputer.fit_transform(X_missing)
        self.assertFalse(np.isnan(X_imputed).any(), "There should be no NaNs after imputation")

    def test_scaling(self):
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(self.X)
        # Mean should be ~0, std should be ~1
        np.testing.assert_almost_equal(np.mean(X_scaled, axis=0), np.zeros(X_scaled.shape[1]), decimal=6)
        np.testing.assert_almost_equal(np.std(X_scaled, axis=0), np.ones(X_scaled.shape[1]), decimal=6)

    def test_lasso_feature_selection(self):
        lasso = LassoCV(cv=3, random_state=42, max_iter=10000)
        lasso.fit(self.X, self.y)
        coef = lasso.coef_
        selected_features = np.where(coef != 0)[0]
        self.assertTrue(isinstance(selected_features, np.ndarray))

    def test_train_test_split(self):
        X_train, X_test, y_train, y_test = train_test_split(self.X, self.y, test_size=0.3, random_state=42, stratify=self.y)
        self.assertEqual(len(X_train) + len(X_test), len(self.X))

    def test_xgboost_training(self):
        X_train, X_test, y_train, y_test = train_test_split(self.X, self.y, test_size=0.3, random_state=42, stratify=self.y)
        model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        acc = accuracy_score(y_test, y_pred)
        self.assertGreaterEqual(acc, 0.0)
        self.assertLessEqual(acc, 1.0)

    @patch('matplotlib.pyplot.show')  # prevent plot from actually displaying during test
    def test_feature_importance_plot(self, mock_show):
        X_train, X_test, y_train, y_test = train_test_split(self.X, self.y, test_size=0.3, random_state=42, stratify=self.y)
        model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
        model.fit(X_train, y_train)
        importances = model.feature_importances_
        self.assertEqual(len(importances), self.X.shape[1])
        mock_show.assert_not_called()  # Confirm that `show()` is not called during test by default

if __name__ == "__main__":
    unittest.main()
